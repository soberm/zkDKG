import "./ecc/compressPoints";
import "./utils/casts/field_array_to_u8_array";
import "./utils/casts/field_to_u8_array";
import "./utils/casts/keccak_to_field";

from "ecc/babyjubjubParams" import BABYJUBJUB_PARAMS;
import "ecc/edwardsAdd";
import "ecc/edwardsScalarMult";
import "ecc/proofOfOwnership";
import "hashes/poseidon/poseidon";
import "hashes/keccak/256bit" as keccak256;
import "utils/pack/bool/pack256";
import "utils/pack/bool/unpack256";

// const u32 PARTICIPANTS = (To be filled in by the build script)
const u32 N = PARTICIPANTS / 2 + 1;
const u32 N_TIMES_32 = N * 32;

def computeSharedKey(field secretKey, field[2] pubKey, field[N][2] commits) -> field {
    field[2] exchanged_key = edwardsScalarMult(unpack256(secretKey), pubKey, BABYJUBJUB_PARAMS);

    return poseidon([exchanged_key[0], commits[0][0]]);
}

def decrypt(field secretKey, field[2] pubKey, field[N][2] commits, field encryptedShare) -> field {
    return encryptedShare - computeSharedKey(secretKey, pubKey, commits);
}

/*
 * Evaluate the public commitment polynomial at the given index.
 * Analogous to https://github.com/dedis/kyber/blob/1a3d86c4f61cd7ac92bf14509aa887c728a5fe2a/share/poly.go#L339
 */
def evalPubPoly(field index, field[N][2] commits) -> field[2] {
    field[2] mut expected = BABYJUBJUB_PARAMS.INFINITY;
    for u32 i in 0..N {
        expected = edwardsScalarMult(unpack256(index), expected, BABYJUBJUB_PARAMS);
        expected = edwardsAdd(expected, commits[N-1-i], BABYJUBJUB_PARAMS);
    }

    return expected;
}

// TODO index can be u64
def main(private field[N][2] commits, private field secretKey, private field[2] pubKeyProofer, private field[2] pubKeyDisputer, private field index, private field encryptedShare, field hash) -> bool {
    assert(proofOfOwnership(pubKeyProofer, secretKey, BABYJUBJUB_PARAMS));

    u8[32] commitsHash = keccak256(compressPoints::<_,N_TIMES_32>(commits));

    assert(hash == keccak_to_field(keccak256([
        ...commitsHash,
        ...field_array_to_u8_array::<_,64>(pubKeyProofer),
        ...field_array_to_u8_array::<_,64>(pubKeyDisputer),
        ...field_to_u8_array(index),
        ...field_to_u8_array(encryptedShare)
    ])));

    /*
     * The shares on the blockchain are encrypted through one-time pad encryption,
     * using a combination of DH key exchange and keccak256 to generate a single-use key.
     */
    field share = decrypt(secretKey, pubKeyDisputer, commits, encryptedShare);
    
    field[2] G = [BABYJUBJUB_PARAMS.Gu, BABYJUBJUB_PARAMS.Gv];
    field[2] actual = edwardsScalarMult(unpack256(share), G, BABYJUBJUB_PARAMS);
    field[2] expected = evalPubPoly(index, commits);

    return actual[0] == expected[0] && actual[1] == expected[1];
}
