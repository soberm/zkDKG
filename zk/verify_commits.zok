import "ecc/edwardsCompress" as edwardsCompress
import "hashes/keccak/256bit" as keccak256
import "./utils/casts/bool_array_to_u64_array" as bool_array_to_u64_array
import "./utils/casts/field_array_to_u64_array" as field_array_to_u64_array
import "utils/casts/u64_to_bits" as u64_to_bits
import "utils/pack/bool/pack128" as pack128

def commits_to_u64<N, P>(field[N][2] commits) -> u64[P]:
    assert(P == 8 * N)

    u64[P] commits_u64 = [0; P]
    
    for u32 i in 0..N do
        u64[8] hash_u64 = field_array_to_u64_array::<2,8>(commits[i])
        for u32 j in 0..8 do
            commits_u64[i*8+j] = hash_u64[j]
        endfor
    endfor

    return commits_u64

/*def compress_commits_to_u64<N, P>(field[N][2] commits) -> u64[P]:
    assert(P == 4 * N)

    u64[P] commits_u64 = [0; P]
    
    for u32 i in 0..N do
        bool[256] compressed = edwardsCompress(commits[i])
        u64[4] hash_u64 = bool_array_to_u64_array(compressed)
        for u32 j in 0..4 do
            commits_u64[i*4+j] = hash_u64[j]
        endfor
    endfor

    return commits_u64*/

def hash_commits<N, P>(field[N][2] commits) -> field[2]:
    u64[4] hash = keccak256(commits_to_u64::<N, P>(commits))

    bool[128] lhs = [...u64_to_bits(hash[0]), ...u64_to_bits(hash[1])]
    bool[128] rhs = [...u64_to_bits(hash[2]), ...u64_to_bits(hash[3])]

    return [pack128(lhs), pack128(rhs)]

def verify_commits<N, P>(field[N][2] commits, field[2] hash) -> bool:
    
    field[2] hashedCommits = hash_commits::<N,P>(commits)

    return hashedCommits[0] == hash[0] && hashedCommits[1] == hash[1]