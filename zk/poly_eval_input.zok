import "./ecc/edwardsOnCurve" as edwardsOnCurve
import "./utils/casts/commits_to_u64" as commits_to_u64
import "./utils/casts/field_array_to_u64_array" as field_array_to_u64_array
import "./utils/casts/u64_array_to_field_array" as u64_array_to_field_array

from "ecc/babyjubjubParams" import BABYJUBJUB_PARAMS
import "hashes/keccak/256bit" as keccak256

const u32 N = 2

/*
 * Checks if the commits and the public key of the dealer are all valid points on the curve.
 * Returns true if all points are valid, false otherwise.
 */
def main(private field[N][2] commits, private field[2] pubKeyDealer, field[2] hash) -> bool:
    u64[4] commitsHash = keccak256(commits_to_u64::<_,16>(commits))

    assert(hash == u64_array_to_field_array::<_,2>(keccak256([
        ...commitsHash,
        ...field_array_to_u64_array::<_,8>(pubKeyDealer)
    ])))

    bool onCurve = edwardsOnCurve(pubKeyDealer, BABYJUBJUB_PARAMS)

    for u32 i in 0..N do
        onCurve = onCurve && edwardsOnCurve(commits[i], BABYJUBJUB_PARAMS)
    endfor

    return onCurve